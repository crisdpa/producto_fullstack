[{"/src/src/index.js":"1","/src/src/reportWebVitals.js":"2","/src/src/App/App.js":"3","/src/src/App/Button.jsx":"4","/src/src/App/Map.jsx":"5","/src/src/Utils/ApiUils.js":"6"},{"size":504,"mtime":1611880690000,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1611880690000,"results":"9","hashOfConfig":"8"},{"size":438,"mtime":1611880690000,"results":"10","hashOfConfig":"8"},{"size":601,"mtime":1611880690000,"results":"11","hashOfConfig":"8"},{"size":2729,"mtime":1611880690000,"results":"12","hashOfConfig":"8"},{"size":717,"mtime":1611880690000,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1icz4mn",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/src/src/index.js",[],["28","29"],"/src/src/reportWebVitals.js",[],"/src/src/App/App.js",[],"/src/src/App/Button.jsx",[],"/src/src/App/Map.jsx",["30"],"import React, { useRef, useEffect } from 'react';\nimport * as L from 'leaflet';\nimport carto from '@carto/carto.js';\nimport 'leaflet/dist/leaflet.css';\nimport PropTypes from 'prop-types';\nimport { getPoints } from '../Utils/ApiUils';\nimport './Map.css';\n\nfunction Map (props) {\n  const {\n    lat,\n    lng,\n    zoom,\n    basemapURL,\n    requestPoint,\n  } = props;\n\n  let username = '';\n  let apiKey = '';\n  let tableName = '';\n  if (process && process.env) {\n    if(process.envREACT_APP_USERNAME) {\n      username = process.env.REACT_APP_USERNAME;\n    }\n    if(process.REACT_APP_API_KEY) {\n      apiKey = process.env.REACT_APP_API_KEY;\n    }\n    if(process.REACT_APP_TABLE_NAME) {\n      tableName = process.env.REACT_APP_TABLE_NAME;\n    }\n  }\n  \n  const map = useRef({});\n\n  requestPoint.current = async () => {\n    const pointsLayer = await createPointsLayer(username, apiKey, tableName);\n    const popup = L.popup({ closeButton: true });\n    pointsLayer.addTo(map.current);\n    \n    pointsLayer.eachLayer(point=> {\n      point.on('click', e => {\n        let htmlContent;\n        htmlContent = makeMarkupOnePoint(e.latlng.lat, e.latlng.lng, e.direction);\n        popup.setContent(htmlContent);\n        popup.setLatLng(e.latlng);\n        if (!popup.isOpen()) {\n          popup.openOn(map.current);\n        }\n      });\n    });\n  };\n  \n    \n  useEffect(() => {\n    map.current = L.map('map', {\n      center: [lat, lng],\n      zoom,\n      zoomControl: false\n    });\n    const basemap = L.tileLayer(basemapURL, {\n      detectRetina: true,\n      retina: '@2x',\n    });\n    basemap.addTo(map.current)\n\n  }, [\n    lat,\n    lng,\n    zoom,\n    basemapURL,\n  ]);\n  return (\n    <div id=\"map\"/>\n  );\n}\n    \nconst createPointsLayer = async (user, key, tableName) => {\n  let pointData;\n  await getPoints(user, key, tableName).then(data=>pointData = data);\n\n  const pointsArray = [];\n  pointData.forEach(p=>{\n    const circleMarker = L.circleMarker(p, {\n      color: '#3388ff'\n    }).setRadius(1);\n    pointsArray.push(circleMarker);\n  });\n\n  return L.layerGroup(pointsArray);\n};\n    \nfunction makeMarkupOnePoint(lat, lng, info = '') {\n  return `\n    <div class=\"widget\">\n    ${lat ? `\n    <h3>${lat}, ${lng}</h3>\n    `: ''}\n    ${info ? `\n    <h4>${info}</h4>\n    `: '<h4>No hay direcci√≥n</h4>'}\n    </div>\n  `;\n}\n    \n    \nMap.propTypes = {\n  basemapURL: PropTypes.string,\n  lat: PropTypes.number.isRequired,\n  lng: PropTypes.number.isRequired,\n  zoom: PropTypes.number,\n  requestPoint: PropTypes.shape({\n    current: PropTypes.func,\n  })\n};\nMap.defaultProps = {\n  zoom: 13,\n  basemapURL: 'https://{s}.basemaps.cartocdn.com/rastertiles/light_all/{z}/{x}/{y}.png',\n  requestPoint: {\n    current: () => {},\n  }\n}\n    \nexport default Map;\n    \n","/src/src/Utils/ApiUils.js",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":3,"column":8,"nodeType":"37","messageId":"38","endLine":3,"endColumn":13},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"no-unused-vars","'carto' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]